@using TechShop.Entities.Code
@model ShopViewModel
@{
    ViewBag.Title = "Index";
}

<
<!-- Page title -->
<div class="page-title parallax parallax1">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <div class="page-title-heading">
                    <h1 class="title">Shop</h1>
                </div><!-- /.page-title-heading -->
            </div><!-- /.col-md-12 -->
        </div><!-- /.row -->
    </div><!-- /.container -->
</div><!-- /.page-title -->

<section class="flat-row main-shop shop-slidebar">
    <div class="container">
        <div class="row">
            <div class="col-md-3">
                <div class="sidebar slidebar-shop">
                    <div class="widget widget-search">
                        <a href="@Url.Action("Index", "Shop")" class="btn btn-danger">RESET ALL FILTERS</a><br /><br />
                        <form role="search" method="get" class="search-form" action="@Url.Action("Index", "Shop")">
                            <label>
                                <input type="search" class="search-field" placeholder="Search …" value="@Model.SearchTerm" name="searchTerm">
                            </label>
                            <input type="submit" class="search-submit" value="Search">
                        </form>
                    </div><!-- /.widget-search -->
                    <div class="widget widget-price">
                        <h5 class="widget-title">Filter by price</h5>
                        <div class="price-filter">
                            <div id="slide-range"></div>
                            <p class="amount">
                                Price: <input type="text" id="amount" disabled="">
                            </p>
                        </div>
                    </div>
                    <div class="widget widget-sort-by">
                        <h5 class="widget-title">
                            Sort By
                        </h5>
                        <ul>
                            <li>
                                <label>Category</label>
                                <select id="categorySelect" name="categoryID">
                                    @foreach (var category in Model.Categories)
                                    {
                                        <option value="@category.ID">@category.Name</option>
                                    }
                                </select>
                            </li>
                            <li><button data-href="@Url.Action("FilterProducts", "Shop", new { sortBy = (int)SortByEnums.Default })" class="dataLink btn btn-block @(Model.SortBy.HasValue ? Model.SortBy.Value == (int)SortByEnums.Default ? "active" : string.Empty : "active")">Default</button></li>
                            <li><button data-href="@Url.Action("FilterProducts", "Shop", new { sortBy = (int)SortByEnums.Popularity, categoryID = Model.CategoryID })" class="dataLink btn btn-block @(Model.SortBy.HasValue ? Model.SortBy.Value == (int)SortByEnums.Popularity ? "active" : string.Empty : string.Empty)">Popularity</button></li>
                            <li><button data-href="@Url.Action("FilterProducts", "Shop", new { sortBy = (int)SortByEnums.Latest, categoryID = Model.CategoryID })" class="dataLink btn btn-block @(Model.SortBy.HasValue ? Model.SortBy.Value == (int)SortByEnums.Latest ? "active" : string.Empty : string.Empty)">Latest</button></li>
                            <li><button data-href="@Url.Action("FilterProducts", "Shop", new { sortBy = (int)SortByEnums.PriceLowToHigh, categoryID = Model.CategoryID })" class="dataLink btn btn-block @(Model.SortBy.HasValue ? Model.SortBy.Value == (int)SortByEnums.PriceLowToHigh ? "active" : string.Empty : string.Empty)">Price: low to high</button></li>
                            <li><button data-href="@Url.Action("FilterProducts", "Shop", new { sortBy = (int)SortByEnums.PriceHighToLow, categoryID = Model.CategoryID })" class="dataLink btn btn-block @(Model.SortBy.HasValue ? Model.SortBy.Value == (int)SortByEnums.PriceHighToLow ? "active" : string.Empty : string.Empty)">Price: high to low</button></li>
                        </ul>
                    </div><!-- /.widget-sort-by -->
                    <div class="widget widget_tag">
                        <h5 class="widget-title">
                            Tags
                        </h5>
                        <div class="tag-list">
                            @foreach (var category in Model.FeaturedCategories)
                            {
                            <button data-href="@Url.Action("FilterProducts", "Shop", new { categoryID = category.ID, sortBy = Model.SortBy })" class="dataLink btn btn-block btn-primary @(Model.CategoryID.HasValue && Model.CategoryID.Value == category.ID ? "active" : string.Empty)">
                                @category.Name
                            </button>
                                                        }
</div>
                    </div><!-- /.widget -->
                </div><!-- /.sidebar -->
            </div><!-- /.col-md-3 -->
            <div class="col-md-9">
                <div id="productsDiv">
                    @{
                        var filterProductsViewModel = new FilterProductsViewModel();
                        filterProductsViewModel.Products = Model.Products;
                        filterProductsViewModel.Pager = Model.Pager;
                        filterProductsViewModel.CategoryID = Model.CategoryID;
                        filterProductsViewModel.SortBy = Model.SortBy;

                        Html.RenderPartial("FilterProducts", filterProductsViewModel);
                    }
                </div>
            </div><!-- /.col-md-9 -->
        </div><!-- /.row -->
    </div><!-- /.container -->
</section><!-- /.flat-row -->


<script>
	var callTimeout;
	var priceSlider = $("#slide-range").slider({
		range: true,
		min: 0,
		max: @Model.MaxPrice,
		values: [0, @Model.MaxPrice],
		slide: function (event, ui) {
			var minPrice = ui.values[0];
			var maxPrice = ui.values[1];

			$("#amount").val("$" + minPrice + ".00" + " - " + "$" + maxPrice + ".00");

			clearTimeout(callTimeout);
			callTimeout = setTimeout(PriceRangeChange, 500);
		}
	});

	$(".dataLink").click(function () {
		var url = $(this).attr("data-href");

		if (url != "" || url != undefined) {
			GetData(url);
		}
	});

    function GetData(dUrl) {
		//console.log("getdata in");
		//showLoader();

        $.ajax({
            url: dUrl,
            data: {
                minPrice: priceSlider.slider("values", 0),
                maxPrice: priceSlider.slider("values", 1),
            }
        })
            .done(function (response) {
                console.log("done");
                $("#productsDiv").html(response);
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                console.log("fail");
                alert("FAIL");
            });
		//.always(function(){
		//	console.log("always");
		//	hideLoader();
		//});
		//console.log("getdata out");
	}

	function PriceRangeChange(){
		$.ajax({
			url: '@Url.Action("FilterProducts", "Shop")',
			data: {
				searchTerm: $("#SearchTerm").val(),
				sortBy: $("#SortBy").val(),
				categoryID: $("#CategoryID").val(),
				minPrice : priceSlider.slider("values", 0),
				maxPrice : priceSlider.slider("values", 1),
			}
		})
        .done(function (response) {
        	$("#productsDiv").html(response);
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
        	alert("FAIL");
        });
    }


    $(document).ready(function () {
        $("#categorySelect").change(function () {
            var categoryID = $("#categorySelect option:selected").val();
            console.log(categoryID);
            $.ajax({
                url: '@Url.Action("FilterProducts", "Shop")',
                data: {
                    categoryID: categoryID,
                },
		    })
            .done(function (response) {

        	    if (response.Success) {
                    $("#productsDiv").html(response);
        	    }
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
        	    alert("FAIL");
            });
        });
    });
</script>
